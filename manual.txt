Nazwa

Graph

Streszczenie

graph make file_out {{width | w} | val1} {{height | h} val2  | val2} --weight_min val --weight_max val
graph check file_in
graph path file_in from_x val from_y val to_x val to_y val


Opis:

Program na celu utworzenie grafu (wczytaniu grafu z podanego pliku) o podanych wartościach (liczba kolumn, i wierszy węzłów oraz wagach dla krawędzi wyznaczanych w sposób losowy). Potrafi również sprawdzić czy podany graf jest koherenty (za pomocą algorytmu BFS) oraz wyznaczenie na stworzonym grafie najkrótszej scieżki pomiędzy wybranymi parami węzłów, przy pomocy algorytmu Dijkstry.


graph make file_out width height [args]...
    polecenie tworzące graf o zadanych parametrach, zapisujące go do pliku file_out

Parametry:

    file_out
        ścieżka pod którą wygenerowany graf zostanie zapisany

    {width val1 | w val2 | val1}
        szerokość generowanego grafu, liczba naturalna

    {height val2 | h val2 |  val2}
        wysokość generowanego grafu, liczba naturalna

Argumenty:

    -w_min val, --weight_min val
        minimalna wartość losowanych wag grafu, liczba rzeczywista, jeśli nie podano domyślną wartością jest 0
    -w_max val, --weight_max val
        maksymalna wartość losowanych wag grafu, liczba rzeczywista, jeśli nie podano domyślną wartością jest 1

graph check file_in
    polecenie zwraca logiczną wartość 1 jeśli graf w pliku wejściowym file_in jest koherentny i 0 jeśli nie jest

Parametry:

    file_in
        Ścieżka z której graf zostanie wczytany

graph path file_in {from_x val1 from_y val2 to_x val3 to_y val4 | val1 val2 val3 val4}
    polecenie wypisujące najkrtótszą ścieżkę między podanymi w parametrach wierzchołkami grafu

Parametry:
    
    file_in
        Ścieżka z której graf zostanie wczytany

    {from_x val1 | val1}, {from_y val2 | val2}
        odpowiednio horyzontalna i wertykalna współrzędna pozycji wierzchołka grafu od którego szukana będzie najkrótsza ścieżka, liczby naturalne, współrzędne liczone od 0

    {to_x val3 | val3}, {to_y val4 | val4}
        odpowiednio horyzontalna i wertykalna współrzędna pozycji wierzchołka grafu do którego szukana będzie najkrótsza ścieżka, liczby naturalne, współrzędne liczone od 0
        

Komunikaty błędów:

    1. Brak poprawnie wczytanych parametrów wejściowych (z pliku). Przerywa działanie. Komunikat pojawia się gdy w podanych danych wejściowych brak poprawnie zdefiniowanych współrzędnych wierzchołków
    2. Brak podania danych wejściowych. Komunikat pojawia się gdy do programu nie zostanie wprowadzona dana wejściowa. Program będzie wymagał określenia danych (jedynie w przypadku określenia wagi wierzchołków program przyjmuje wartości domyślne <0,1>
    3. Brak komendy. Przerywa działanie. Komunikat pojawia się gdy użytkownik nie poda komendy jaką program ma wykonać ({make | check | path})   


Dokumentacja implementacyjna:


Moduły

-makefile
-wczytanie argumentów wywołania
-przechowywanie grafu
-czytanie i zapis grafu
-sprawdzanie spójności grafu
-szukanie najkrótszej ścieżki w grafie


Struktury:
    
    struct krawedz
    {
        double waga;
        unsigned int _do;
    };

    struct td_krawedz
    {
        struct krawedz **tab;
        int size, cells;
    };

    struct graf
    {
        struct td_krawedz **tab;
        int size, cells;
        int w, h;
    };

Funkcje:

    struct krawedz *init_k(unsigned int _od, double waga);

    struct td_krawedz *dodaj_k(struct td_krawedz *tab_k, struct krawedz *k);
    struct td_krawedz *init_td_krawedz(unsigned int min_size);
    void wypisz_td_krawedz(struct td_krawedz *tab_k);
    void free_td_krawedz(struct td_krawedz *tab_k);

    struct graf *init_graf(unsigned int wierzcholkow);
    struct td_krawedz **graf_dodaj_k(struct td_krawedz **tab, int x1, int x2, double waga, unsigned int psuc);
    struct graf *stworz_graf(int w, int h, double min_wag, double max_wag, unsigned int psuc);
    void free_graf(struct graf *g);
    
Testy:

    Poprawność działania funkcji zawartych w modułach programu będzie testowana przy pomocy testów jednostkowych.
    Testy zostaną podzielone na zestawy. Każdy zestaw będzie grupował testy dotyczącej danej części projektu. Dzięki podziałowi testów łatwiej będzie zidentyfikować kod wywołujący problem.



Repozytorium:

https://github.com/plebania/jimp2-projekt

Autorzy:

Marcin Ścisłowski
Mikołaj Guzik
